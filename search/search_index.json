{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"timewheel/","text":"TimeWheel \u65f6\u95f4\u8f6e\u539f\u7406\u5206\u6790 \u6280\u672f\u6709\u65f6\u5c31\u6e90\u4e8e\u751f\u6d3b\uff0c\u4f8b\u5982\u6392\u961f\u4e70\u7968\u53ef\u4ee5\u60f3\u5230\u961f\u5217\uff0c\u516c\u53f8\u7684\u7ec4\u7ec7\u5173\u7cfb\u53ef\u4ee5\u7406\u89e3\u4e3a\u6811\u7b49\uff0c\u800c\u65f6\u95f4\u8f6e\u7b97\u6cd5\u7684\u8bbe\u8ba1\u601d\u60f3\u5c31\u6765\u6e90\u4e8e\u949f\u8868\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u65f6\u95f4\u8f6e\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u79cd\u73af\u5f62\u7ed3\u6784\uff0c\u50cf\u949f\u8868\u4e00\u6837\u88ab\u5206\u4e3a\u591a\u4e2a slot \u69fd\u4f4d\u3002\u6bcf\u4e2a slot \u4ee3\u8868\u4e00\u4e2a\u65f6\u95f4\u6bb5\uff0c\u6bcf\u4e2a slot \u4e2d\u53ef\u4ee5\u5b58\u653e\u591a\u4e2a\u4efb\u52a1\uff0c\u4f7f\u7528\u7684\u662f\u94fe\u8868\u7ed3\u6784\u4fdd\u5b58\u8be5\u65f6\u95f4\u6bb5\u5230\u671f\u7684\u6240\u6709\u4efb\u52a1\u3002\u65f6\u95f4\u8f6e\u901a\u8fc7\u4e00\u4e2a\u65f6\u9488\u968f\u7740\u65f6\u95f4\u4e00\u4e2a\u4e2a slot \u8f6c\u52a8\uff0c\u5e76\u6267\u884c slot \u4e2d\u7684\u6240\u6709\u5230\u671f\u4efb\u52a1\u3002 \u4efb\u52a1\u662f\u5982\u4f55\u6dfb\u52a0\u5230\u65f6\u95f4\u8f6e\u5f53\u4e2d\u7684\u5462\uff1f\u53ef\u4ee5\u6839\u636e\u4efb\u52a1\u7684\u5230\u671f\u65f6\u95f4\u8fdb\u884c\u53d6\u6a21\uff0c\u7136\u540e\u5c06\u4efb\u52a1\u5206\u5e03\u5230\u4e0d\u540c\u7684 slot \u4e2d\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u65f6\u95f4\u8f6e\u88ab\u5212\u5206\u4e3a 8 \u4e2a slot\uff0c\u6bcf\u4e2a slot \u4ee3\u8868 1s\uff0c\u5f53\u524d\u65f6\u9488\u6307\u5411 2\u3002\u5047\u5982\u73b0\u5728\u9700\u8981\u8c03\u5ea6\u4e00\u4e2a 3s \u540e\u6267\u884c\u7684\u4efb\u52a1\uff0c\u5e94\u8be5\u52a0\u5165 2+3=5 \u7684 slot \u4e2d\uff1b\u5982\u679c\u9700\u8981\u8c03\u5ea6\u4e00\u4e2a 12s \u4ee5\u540e\u7684\u4efb\u52a1\uff0c\u9700\u8981\u7b49\u5f85\u65f6\u9488\u5b8c\u6574\u8d70\u5b8c\u4e00\u5708 round \u96f6 4 \u4e2a slot\uff0c\u9700\u8981\u653e\u5165\u7b2c (2+12)%8=6 \u4e2a slot\u3002 \u90a3\u4e48\u5f53\u65f6\u9488\u8d70\u5230\u7b2c 6 \u4e2a slot \u65f6\uff0c\u600e\u4e48\u533a\u5206\u6bcf\u4e2a\u4efb\u52a1\u662f\u5426\u9700\u8981\u7acb\u5373\u6267\u884c\uff0c\u8fd8\u662f\u9700\u8981\u7b49\u5f85\u4e0b\u4e00\u5708 round\uff0c\u751a\u81f3\u66f4\u4e45\u65f6\u95f4\u4e4b\u540e\u6267\u884c\u5462\uff1f\u6240\u4ee5\u6211\u4eec\u9700\u8981\u628a round \u4fe1\u606f\u4fdd\u5b58\u5728\u4efb\u52a1\u4e2d\u3002\u4f8b\u5982\u56fe\u4e2d\u7b2c 6 \u4e2a slot \u7684\u94fe\u8868\u4e2d\u5305\u542b 3 \u4e2a\u4efb\u52a1\uff0c\u7b2c\u4e00\u4e2a\u4efb\u52a1 round=0\uff0c\u9700\u8981\u7acb\u5373\u6267\u884c\uff1b\u7b2c\u4e8c\u4e2a\u4efb\u52a1 round=1\uff0c\u9700\u8981\u7b49\u5f85 1 8=8s \u540e\u6267\u884c\uff1b\u7b2c\u4e09\u4e2a\u4efb\u52a1 round=2\uff0c\u9700\u8981\u7b49\u5f85 2 8=8s \u540e\u6267\u884c\u3002\u6240\u4ee5\u5f53\u65f6\u9488\u8f6c\u52a8\u5230\u5bf9\u5e94 slot \u65f6\uff0c\u53ea\u6267\u884c round=0 \u7684\u4efb\u52a1\uff0cslot \u4e2d\u5176\u4f59\u4efb\u52a1\u7684 round \u5e94\u5f53\u51cf 1\uff0c\u7b49\u5f85\u4e0b\u4e00\u4e2a round \u4e4b\u540e\u6267\u884c\u3002 \u4e0a\u9762\u4ecb\u7ecd\u4e86\u65f6\u95f4\u8f6e\u7b97\u6cd5\u7684\u57fa\u672c\u7406\u8bba\uff0c\u53ef\u4ee5\u770b\u51fa\u65f6\u95f4\u8f6e\u6709\u70b9\u7c7b\u4f3c HashMap\uff0c\u5982\u679c\u591a\u4e2a\u4efb\u52a1\u5982\u679c\u5bf9\u5e94\u540c\u4e00\u4e2a slot\uff0c\u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5\u91c7\u7528\u7684\u662f\u62c9\u94fe\u6cd5\u3002\u5728\u4efb\u52a1\u6570\u91cf\u6bd4\u8f83\u591a\u7684\u573a\u666f\u4e0b\uff0c\u9002\u5f53\u589e\u52a0\u65f6\u95f4\u8f6e\u7684 slot \u6570\u91cf\uff0c\u53ef\u4ee5\u51cf\u5c11\u65f6\u9488\u8f6c\u52a8\u65f6\u904d\u5386\u7684\u4efb\u52a1\u4e2a\u6570\u3002 \u65f6\u95f4\u8f6e\u5b9a\u65f6\u5668\u6700\u5927\u7684\u4f18\u52bf\u5c31\u662f\uff0c\u4efb\u52a1\u7684\u65b0\u589e\u548c\u53d6\u6d88\u90fd\u662f O(1) \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u800c\u4e14\u53ea\u9700\u8981\u4e00\u4e2a\u7ebf\u7a0b\u5c31\u53ef\u4ee5\u9a71\u52a8\u65f6\u95f4\u8f6e\u8fdb\u884c\u5de5\u4f5c\u3002HashedWheelTimer \u662f Netty \u4e2d\u65f6\u95f4\u8f6e\u7b97\u6cd5\u7684\u5b9e\u73b0\u7c7b\uff0c\u4e0b\u9762\u6211\u5c31\u7ed3\u5408 HashedWheelTimer \u7684\u6e90\u7801\u8be6\u7ec6\u5206\u6790\u65f6\u95f4\u8f6e\u7b97\u6cd5\u7684\u5b9e\u73b0\u539f\u7406\u3002 \u4f7f\u7528\u573a\u666f \u573a\u666f\uff1a \u65f6\u95f4\u9a71\u52a8\u5904\u7406\u573a\u666f\uff1a\u5982\u6574\u70b9\u53d1\u9001\u4f18\u60e0\u5238\uff0c\u6bcf\u5929\u5b9a\u65f6\u66f4\u65b0\u6536\u76ca\uff0c\u6bcf\u5929\u5b9a\u65f6\u5237\u65b0\u6807\u7b7e\u6570\u636e\u548c\u4eba\u7fa4\u6570\u636e \u6279\u91cf\u5904\u7406\u6570\u636e\uff1a\u5982\u6309\u6708\u6279\u91cf\u7edf\u8ba1\u62a5\u8868\u6570\u636e\uff0c\u6279\u91cf\u66f4\u65b0\u67d0\u4e9b\u6570\u636e\u72b6\u6001\uff0c\u5b9e\u65f6\u6027\u8981\u6c42\u4e0d\u9ad8 \u5f02\u6b65\u6267\u884c\u89e3\u8026\uff1a\u5982\u5148\u53cd\u9988\u7528\u6237\u64cd\u4f5c\u72b6\u6001\uff0c\u540e\u53f0\u5f02\u6b65\u6267\u884c\u8f83\u8017\u65f6\u7684\u6570\u636e\u64cd\u4f5c\uff0c\u4ee5\u5b9e\u73b0\u5f02\u6b65\u903b\u8f91\u89e3\u8026 \u65f6\u95f4\u7ef4\u5ea6\uff1a \u5b9a\u65f6\u4efb\u52a1\uff1a\u6bcf\u5929\u5b9a\u65f6\u6267\u884c\u67d0\u4efb\u52a1 \u5ef6\u65f6\u4efb\u52a1\uff1a\u5ef6\u8fdf\u591a\u5c11\u5206\u949f\u6267\u884c\u67d0\u4efb\u52a1 Golang\u5b9e\u73b0(\u5355\u5c42\u65f6\u95f4\u8f6e) \u521d\u59cb\u5316 \u5b9a\u4e49\u65f6\u95f4\u8f6e\u7ed3\u6784 type TimeWheel struct { interval time.Duration // \u65f6\u95f4\u8f6e\u5b9a\u65f6\u8f6c\u52a8\u65f6\u95f4 ticker *time.Ticker // \u65f6\u95f4\u8f6e\u5b9a\u65f6\u8f6c\u52a8\u4efb\u52a1 slots []*list.List // \u94fe\u8868\u6570\u7ec4 timer map[string]*location // \u5b58\u50a8\u4efb\u52a1\u7684\u4f4d\u7f6e\u4fe1\u606f currentPos int // \u5f53\u524d\u6307\u9488\u4f4d\u7f6e slotNum int // \u63d2\u69fd\u4e2a\u6570 addTaskChannel chan task removeTaskChannel chan string stopChannel chan bool } type task struct { delay time.Duration // \u591a\u4e45\u6267\u884c circle int // \u5708\u6570 key string // \u4efb\u52a1key job func() // \u6267\u884c\u4efb\u52a1 } // \u4efb\u52a1\u7684\u5b9a\u4f4d type location struct { slot int // \u63d2\u69fd\u4f4d\u7f6e etask *list.Element // \u4efb\u52a1\u7684\u94fe\u8868\u5143\u7d20 } \u7ed3\u6784\u521d\u59cb\u5316 func New(interval time.Duration, slotNum int) *TimeWheel { if interval <= 0 || slotNum <= 0 { return nil } tw := &TimeWheel{ interval: interval, slots: make([]*list.List, slotNum), timer: make(map[string]*location), currentPos: 0, slotNum: slotNum, addTaskChannel: make(chan task), removeTaskChannel: make(chan string), stopChannel: make(chan bool), } tw.initSlots() return tw } // \u6709\u591a\u5c11\u63d2\u69fdnew\u591a\u5c11\u4e2a\u94fe\u8868 func (tw *TimeWheel) initSlots() { for i := 0; i < tw.slotNum; i++ { tw.slots[i] = list.New() } } \u542f\u52a8\u5b9a\u65f6\u4efb\u52a1\u8f6c\u52a8\u65f6\u9488 func (tw *TimeWheel) Start() { tw.ticker = time.NewTicker(tw.interval) go tw.start() } func (tw *TimeWheel) start() { for { select { case <-tw.ticker.C: tw.tickHandler() // ticker\u5468\u671f\u6027\u53d1\u9001\u65f6\u95f4\uff0c\u8f6c\u52a8\u65f6\u9488 case task := <-tw.addTaskChannel: tw.addTask(&task)// \u5904\u7406\u6dfb\u52a0\u4efb\u52a1 case key := <-tw.removeTaskChannel: tw.removeTask(key)// \u5904\u7406\u5220\u9664\u4efb\u52a1 case <-tw.stopChannel: tw.ticker.Stop()// \u505c\u6b62\u65f6\u95f4\u8f6e return } } } \u6dfb\u52a0\u4efb\u52a1 func (tw *TimeWheel) AddJob(delay time.Duration, key string, job func()) { if delay < 0 { return } tw.addTaskChannel <- task{delay: delay, key: key, job: job} } func (tw *TimeWheel) addTask(task *task) { // \u6839\u636ekey\u786e\u5b9a\u63d2\u69fd\u4f4d\u7f6e pos, circle := tw.getPositionAndCircle(task.delay) task.circle = circle // \u6307\u5b9a\u63d2\u69fd\u4f4d\u7f6e\u7684\u94fe\u8868\u6700\u540e\u6dfb\u52a0\u4efb\u52a1\u5143\u7d20 e := tw.slots[pos].PushBack(task) // \u4efb\u52a1\u7684\u5b9a\u4f4d\u4fe1\u606f loc := &location{ slot: pos, etask: e, } if task.key != \"\" { // \u4e4b\u524d\u6709\u540c\u540d\u4efb\u52a1\u5b58\u5728\u5219\u5220\u9664 _, ok := tw.timer[task.key] if ok { tw.removeTask(task.key) } } tw.timer[task.key] = loc } func (tw *TimeWheel) getPositionAndCircle(delay time.Duration) (pos int, circle int) { delaySeconds := int(delay.Seconds()) intervalSeconds := int(tw.interval.Seconds()) circle = int(delaySeconds / intervalSeconds / tw.slotNum) // \u8ba1\u7b97\u5708\u6570 pos = int(tw.currentPos+delaySeconds/intervalSeconds) % tw.slotNum // \u8ba1\u7b97\u63d2\u69fd\u4f4d\u7f6e return } \u5220\u9664\u4efb\u52a1 func (tw *TimeWheel) RemoveJob(key string) { tw.removeTaskChannel <- key } func (tw *TimeWheel) removeTask(key string) { // \u901a\u8fc7\u4efb\u52a1\u540d\u627e\u5230\u4efb\u52a1\u5b9a\u4f4d\u4fe1\u606f loc, ok := tw.timer[key] if !ok { return } // \u5220\u9664\u63d2\u69fd\u94fe\u8868\u7684\u4efb\u52a1\u5143\u7d20 l := tw.slots[loc.slot] l.Remove(loc.etask) delete(tw.timer, key) } \u505c\u6b62\u65f6\u95f4\u8f6e func (tw *TimeWheel) Stop() { tw.stopChannel <- true } \u5c01\u88c5 var tw = New(time.Second, 3600) func init() { tw.Start() } func At(at time.Time, key string, job func()) { tw.AddJob(at.Sub(time.Now()), key, job) } func Delay(delay time.Duration, key string, job func()) { tw.AddJob(delay, key, job) } func Cancel(key string) { tw.RemoveJob(key) } func Stop() { tw.Stop() } \u6d4b\u8bd5 func TestAt(t *testing.T) { At(time.Now().Add(5*time.Second), \"at\", func() { println(time.Now().String() + \" at\") }) time.Sleep(7 * time.Second) } func TestDelay(t *testing.T) { ch := make(chan time.Time) now := time.Now() Delay(5*time.Second, \"delay\", func() { println(\"delay\") ch <- time.Now() }) execAt := <-ch if execAt.Sub(now) < 5*time.Second { t.Error() } } func TestCancel(t *testing.T) { now := time.Now() At(now.Add(5*time.Second), \"cancel\", func() { println(\"cancel\") }) Cancel(\"cancel\") time.Sleep(7 * time.Second) }","title":"TimeWheel"},{"location":"timewheel/#timewheel","text":"","title":"TimeWheel"},{"location":"timewheel/#_1","text":"\u6280\u672f\u6709\u65f6\u5c31\u6e90\u4e8e\u751f\u6d3b\uff0c\u4f8b\u5982\u6392\u961f\u4e70\u7968\u53ef\u4ee5\u60f3\u5230\u961f\u5217\uff0c\u516c\u53f8\u7684\u7ec4\u7ec7\u5173\u7cfb\u53ef\u4ee5\u7406\u89e3\u4e3a\u6811\u7b49\uff0c\u800c\u65f6\u95f4\u8f6e\u7b97\u6cd5\u7684\u8bbe\u8ba1\u601d\u60f3\u5c31\u6765\u6e90\u4e8e\u949f\u8868\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u65f6\u95f4\u8f6e\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u79cd\u73af\u5f62\u7ed3\u6784\uff0c\u50cf\u949f\u8868\u4e00\u6837\u88ab\u5206\u4e3a\u591a\u4e2a slot \u69fd\u4f4d\u3002\u6bcf\u4e2a slot \u4ee3\u8868\u4e00\u4e2a\u65f6\u95f4\u6bb5\uff0c\u6bcf\u4e2a slot \u4e2d\u53ef\u4ee5\u5b58\u653e\u591a\u4e2a\u4efb\u52a1\uff0c\u4f7f\u7528\u7684\u662f\u94fe\u8868\u7ed3\u6784\u4fdd\u5b58\u8be5\u65f6\u95f4\u6bb5\u5230\u671f\u7684\u6240\u6709\u4efb\u52a1\u3002\u65f6\u95f4\u8f6e\u901a\u8fc7\u4e00\u4e2a\u65f6\u9488\u968f\u7740\u65f6\u95f4\u4e00\u4e2a\u4e2a slot \u8f6c\u52a8\uff0c\u5e76\u6267\u884c slot \u4e2d\u7684\u6240\u6709\u5230\u671f\u4efb\u52a1\u3002 \u4efb\u52a1\u662f\u5982\u4f55\u6dfb\u52a0\u5230\u65f6\u95f4\u8f6e\u5f53\u4e2d\u7684\u5462\uff1f\u53ef\u4ee5\u6839\u636e\u4efb\u52a1\u7684\u5230\u671f\u65f6\u95f4\u8fdb\u884c\u53d6\u6a21\uff0c\u7136\u540e\u5c06\u4efb\u52a1\u5206\u5e03\u5230\u4e0d\u540c\u7684 slot \u4e2d\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u65f6\u95f4\u8f6e\u88ab\u5212\u5206\u4e3a 8 \u4e2a slot\uff0c\u6bcf\u4e2a slot \u4ee3\u8868 1s\uff0c\u5f53\u524d\u65f6\u9488\u6307\u5411 2\u3002\u5047\u5982\u73b0\u5728\u9700\u8981\u8c03\u5ea6\u4e00\u4e2a 3s \u540e\u6267\u884c\u7684\u4efb\u52a1\uff0c\u5e94\u8be5\u52a0\u5165 2+3=5 \u7684 slot \u4e2d\uff1b\u5982\u679c\u9700\u8981\u8c03\u5ea6\u4e00\u4e2a 12s \u4ee5\u540e\u7684\u4efb\u52a1\uff0c\u9700\u8981\u7b49\u5f85\u65f6\u9488\u5b8c\u6574\u8d70\u5b8c\u4e00\u5708 round \u96f6 4 \u4e2a slot\uff0c\u9700\u8981\u653e\u5165\u7b2c (2+12)%8=6 \u4e2a slot\u3002 \u90a3\u4e48\u5f53\u65f6\u9488\u8d70\u5230\u7b2c 6 \u4e2a slot \u65f6\uff0c\u600e\u4e48\u533a\u5206\u6bcf\u4e2a\u4efb\u52a1\u662f\u5426\u9700\u8981\u7acb\u5373\u6267\u884c\uff0c\u8fd8\u662f\u9700\u8981\u7b49\u5f85\u4e0b\u4e00\u5708 round\uff0c\u751a\u81f3\u66f4\u4e45\u65f6\u95f4\u4e4b\u540e\u6267\u884c\u5462\uff1f\u6240\u4ee5\u6211\u4eec\u9700\u8981\u628a round \u4fe1\u606f\u4fdd\u5b58\u5728\u4efb\u52a1\u4e2d\u3002\u4f8b\u5982\u56fe\u4e2d\u7b2c 6 \u4e2a slot \u7684\u94fe\u8868\u4e2d\u5305\u542b 3 \u4e2a\u4efb\u52a1\uff0c\u7b2c\u4e00\u4e2a\u4efb\u52a1 round=0\uff0c\u9700\u8981\u7acb\u5373\u6267\u884c\uff1b\u7b2c\u4e8c\u4e2a\u4efb\u52a1 round=1\uff0c\u9700\u8981\u7b49\u5f85 1 8=8s \u540e\u6267\u884c\uff1b\u7b2c\u4e09\u4e2a\u4efb\u52a1 round=2\uff0c\u9700\u8981\u7b49\u5f85 2 8=8s \u540e\u6267\u884c\u3002\u6240\u4ee5\u5f53\u65f6\u9488\u8f6c\u52a8\u5230\u5bf9\u5e94 slot \u65f6\uff0c\u53ea\u6267\u884c round=0 \u7684\u4efb\u52a1\uff0cslot \u4e2d\u5176\u4f59\u4efb\u52a1\u7684 round \u5e94\u5f53\u51cf 1\uff0c\u7b49\u5f85\u4e0b\u4e00\u4e2a round \u4e4b\u540e\u6267\u884c\u3002 \u4e0a\u9762\u4ecb\u7ecd\u4e86\u65f6\u95f4\u8f6e\u7b97\u6cd5\u7684\u57fa\u672c\u7406\u8bba\uff0c\u53ef\u4ee5\u770b\u51fa\u65f6\u95f4\u8f6e\u6709\u70b9\u7c7b\u4f3c HashMap\uff0c\u5982\u679c\u591a\u4e2a\u4efb\u52a1\u5982\u679c\u5bf9\u5e94\u540c\u4e00\u4e2a slot\uff0c\u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5\u91c7\u7528\u7684\u662f\u62c9\u94fe\u6cd5\u3002\u5728\u4efb\u52a1\u6570\u91cf\u6bd4\u8f83\u591a\u7684\u573a\u666f\u4e0b\uff0c\u9002\u5f53\u589e\u52a0\u65f6\u95f4\u8f6e\u7684 slot \u6570\u91cf\uff0c\u53ef\u4ee5\u51cf\u5c11\u65f6\u9488\u8f6c\u52a8\u65f6\u904d\u5386\u7684\u4efb\u52a1\u4e2a\u6570\u3002 \u65f6\u95f4\u8f6e\u5b9a\u65f6\u5668\u6700\u5927\u7684\u4f18\u52bf\u5c31\u662f\uff0c\u4efb\u52a1\u7684\u65b0\u589e\u548c\u53d6\u6d88\u90fd\u662f O(1) \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u800c\u4e14\u53ea\u9700\u8981\u4e00\u4e2a\u7ebf\u7a0b\u5c31\u53ef\u4ee5\u9a71\u52a8\u65f6\u95f4\u8f6e\u8fdb\u884c\u5de5\u4f5c\u3002HashedWheelTimer \u662f Netty \u4e2d\u65f6\u95f4\u8f6e\u7b97\u6cd5\u7684\u5b9e\u73b0\u7c7b\uff0c\u4e0b\u9762\u6211\u5c31\u7ed3\u5408 HashedWheelTimer \u7684\u6e90\u7801\u8be6\u7ec6\u5206\u6790\u65f6\u95f4\u8f6e\u7b97\u6cd5\u7684\u5b9e\u73b0\u539f\u7406\u3002","title":"\u65f6\u95f4\u8f6e\u539f\u7406\u5206\u6790"},{"location":"timewheel/#_2","text":"\u573a\u666f\uff1a \u65f6\u95f4\u9a71\u52a8\u5904\u7406\u573a\u666f\uff1a\u5982\u6574\u70b9\u53d1\u9001\u4f18\u60e0\u5238\uff0c\u6bcf\u5929\u5b9a\u65f6\u66f4\u65b0\u6536\u76ca\uff0c\u6bcf\u5929\u5b9a\u65f6\u5237\u65b0\u6807\u7b7e\u6570\u636e\u548c\u4eba\u7fa4\u6570\u636e \u6279\u91cf\u5904\u7406\u6570\u636e\uff1a\u5982\u6309\u6708\u6279\u91cf\u7edf\u8ba1\u62a5\u8868\u6570\u636e\uff0c\u6279\u91cf\u66f4\u65b0\u67d0\u4e9b\u6570\u636e\u72b6\u6001\uff0c\u5b9e\u65f6\u6027\u8981\u6c42\u4e0d\u9ad8 \u5f02\u6b65\u6267\u884c\u89e3\u8026\uff1a\u5982\u5148\u53cd\u9988\u7528\u6237\u64cd\u4f5c\u72b6\u6001\uff0c\u540e\u53f0\u5f02\u6b65\u6267\u884c\u8f83\u8017\u65f6\u7684\u6570\u636e\u64cd\u4f5c\uff0c\u4ee5\u5b9e\u73b0\u5f02\u6b65\u903b\u8f91\u89e3\u8026 \u65f6\u95f4\u7ef4\u5ea6\uff1a \u5b9a\u65f6\u4efb\u52a1\uff1a\u6bcf\u5929\u5b9a\u65f6\u6267\u884c\u67d0\u4efb\u52a1 \u5ef6\u65f6\u4efb\u52a1\uff1a\u5ef6\u8fdf\u591a\u5c11\u5206\u949f\u6267\u884c\u67d0\u4efb\u52a1","title":"\u4f7f\u7528\u573a\u666f"},{"location":"timewheel/#golang","text":"","title":"Golang\u5b9e\u73b0(\u5355\u5c42\u65f6\u95f4\u8f6e)"},{"location":"timewheel/#_3","text":"\u5b9a\u4e49\u65f6\u95f4\u8f6e\u7ed3\u6784 type TimeWheel struct { interval time.Duration // \u65f6\u95f4\u8f6e\u5b9a\u65f6\u8f6c\u52a8\u65f6\u95f4 ticker *time.Ticker // \u65f6\u95f4\u8f6e\u5b9a\u65f6\u8f6c\u52a8\u4efb\u52a1 slots []*list.List // \u94fe\u8868\u6570\u7ec4 timer map[string]*location // \u5b58\u50a8\u4efb\u52a1\u7684\u4f4d\u7f6e\u4fe1\u606f currentPos int // \u5f53\u524d\u6307\u9488\u4f4d\u7f6e slotNum int // \u63d2\u69fd\u4e2a\u6570 addTaskChannel chan task removeTaskChannel chan string stopChannel chan bool } type task struct { delay time.Duration // \u591a\u4e45\u6267\u884c circle int // \u5708\u6570 key string // \u4efb\u52a1key job func() // \u6267\u884c\u4efb\u52a1 } // \u4efb\u52a1\u7684\u5b9a\u4f4d type location struct { slot int // \u63d2\u69fd\u4f4d\u7f6e etask *list.Element // \u4efb\u52a1\u7684\u94fe\u8868\u5143\u7d20 } \u7ed3\u6784\u521d\u59cb\u5316 func New(interval time.Duration, slotNum int) *TimeWheel { if interval <= 0 || slotNum <= 0 { return nil } tw := &TimeWheel{ interval: interval, slots: make([]*list.List, slotNum), timer: make(map[string]*location), currentPos: 0, slotNum: slotNum, addTaskChannel: make(chan task), removeTaskChannel: make(chan string), stopChannel: make(chan bool), } tw.initSlots() return tw } // \u6709\u591a\u5c11\u63d2\u69fdnew\u591a\u5c11\u4e2a\u94fe\u8868 func (tw *TimeWheel) initSlots() { for i := 0; i < tw.slotNum; i++ { tw.slots[i] = list.New() } } \u542f\u52a8\u5b9a\u65f6\u4efb\u52a1\u8f6c\u52a8\u65f6\u9488 func (tw *TimeWheel) Start() { tw.ticker = time.NewTicker(tw.interval) go tw.start() } func (tw *TimeWheel) start() { for { select { case <-tw.ticker.C: tw.tickHandler() // ticker\u5468\u671f\u6027\u53d1\u9001\u65f6\u95f4\uff0c\u8f6c\u52a8\u65f6\u9488 case task := <-tw.addTaskChannel: tw.addTask(&task)// \u5904\u7406\u6dfb\u52a0\u4efb\u52a1 case key := <-tw.removeTaskChannel: tw.removeTask(key)// \u5904\u7406\u5220\u9664\u4efb\u52a1 case <-tw.stopChannel: tw.ticker.Stop()// \u505c\u6b62\u65f6\u95f4\u8f6e return } } }","title":"\u521d\u59cb\u5316"},{"location":"timewheel/#_4","text":"func (tw *TimeWheel) AddJob(delay time.Duration, key string, job func()) { if delay < 0 { return } tw.addTaskChannel <- task{delay: delay, key: key, job: job} } func (tw *TimeWheel) addTask(task *task) { // \u6839\u636ekey\u786e\u5b9a\u63d2\u69fd\u4f4d\u7f6e pos, circle := tw.getPositionAndCircle(task.delay) task.circle = circle // \u6307\u5b9a\u63d2\u69fd\u4f4d\u7f6e\u7684\u94fe\u8868\u6700\u540e\u6dfb\u52a0\u4efb\u52a1\u5143\u7d20 e := tw.slots[pos].PushBack(task) // \u4efb\u52a1\u7684\u5b9a\u4f4d\u4fe1\u606f loc := &location{ slot: pos, etask: e, } if task.key != \"\" { // \u4e4b\u524d\u6709\u540c\u540d\u4efb\u52a1\u5b58\u5728\u5219\u5220\u9664 _, ok := tw.timer[task.key] if ok { tw.removeTask(task.key) } } tw.timer[task.key] = loc } func (tw *TimeWheel) getPositionAndCircle(delay time.Duration) (pos int, circle int) { delaySeconds := int(delay.Seconds()) intervalSeconds := int(tw.interval.Seconds()) circle = int(delaySeconds / intervalSeconds / tw.slotNum) // \u8ba1\u7b97\u5708\u6570 pos = int(tw.currentPos+delaySeconds/intervalSeconds) % tw.slotNum // \u8ba1\u7b97\u63d2\u69fd\u4f4d\u7f6e return }","title":"\u6dfb\u52a0\u4efb\u52a1"},{"location":"timewheel/#_5","text":"func (tw *TimeWheel) RemoveJob(key string) { tw.removeTaskChannel <- key } func (tw *TimeWheel) removeTask(key string) { // \u901a\u8fc7\u4efb\u52a1\u540d\u627e\u5230\u4efb\u52a1\u5b9a\u4f4d\u4fe1\u606f loc, ok := tw.timer[key] if !ok { return } // \u5220\u9664\u63d2\u69fd\u94fe\u8868\u7684\u4efb\u52a1\u5143\u7d20 l := tw.slots[loc.slot] l.Remove(loc.etask) delete(tw.timer, key) }","title":"\u5220\u9664\u4efb\u52a1"},{"location":"timewheel/#_6","text":"func (tw *TimeWheel) Stop() { tw.stopChannel <- true }","title":"\u505c\u6b62\u65f6\u95f4\u8f6e"},{"location":"timewheel/#_7","text":"var tw = New(time.Second, 3600) func init() { tw.Start() } func At(at time.Time, key string, job func()) { tw.AddJob(at.Sub(time.Now()), key, job) } func Delay(delay time.Duration, key string, job func()) { tw.AddJob(delay, key, job) } func Cancel(key string) { tw.RemoveJob(key) } func Stop() { tw.Stop() }","title":"\u5c01\u88c5"},{"location":"timewheel/#_8","text":"func TestAt(t *testing.T) { At(time.Now().Add(5*time.Second), \"at\", func() { println(time.Now().String() + \" at\") }) time.Sleep(7 * time.Second) } func TestDelay(t *testing.T) { ch := make(chan time.Time) now := time.Now() Delay(5*time.Second, \"delay\", func() { println(\"delay\") ch <- time.Now() }) execAt := <-ch if execAt.Sub(now) < 5*time.Second { t.Error() } } func TestCancel(t *testing.T) { now := time.Now() At(now.Add(5*time.Second), \"cancel\", func() { println(\"cancel\") }) Cancel(\"cancel\") time.Sleep(7 * time.Second) }","title":"\u6d4b\u8bd5"}]}